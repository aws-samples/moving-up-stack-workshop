<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Moving up the technology stack as you modernize applications on Workshop</title>
    <link>/</link>
    <description>Recent content in Moving up the technology stack as you modernize applications on Workshop</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language><atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Create Proton Templates</title>
      <link>/scenario2/05_create_proton_template.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/scenario2/05_create_proton_template.html</guid>
      <description>What are we going to do? In this section we&amp;rsquo;ll use the aws cli to configure proton templates for our environment and microservices.
Step by step guide Start by logging into your Cloud9 workstations.
Set your default variables
export AWS_DEFAULT_REGION=$(curl -s 169.254.169.254/latest/dynamic/instance-identity/document | jq -r &amp;#39;.region&amp;#39;) export ACCOUNT_ID=`aws sts get-caller-identity --query Account --output text` Next, we&amp;rsquo;ll navigate to our template folder.
cd ~/environment/moving-up-stack-workshop/resources/code/scenario2/loadbalanced-fargate-redis-mysql/ Configure IAM Role, S3 Bucket, and CodeStar Connections Connection Before you register your templates and deploy your environments and services, you will need to create an Amazon IAM role so that AWS Proton can manage resources in your AWS account, an Amazon S3 bucket to store your templates, and a CodeStar Connections connection to pull and deploy your application code.</description>
    </item>
    
    <item>
      <title>Creating AppRegistry application with Proton</title>
      <link>/scenario3/05_map_env_resources_with_appregistry.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/scenario3/05_map_env_resources_with_appregistry.html</guid>
      <description>What are we going to do? We are going to perform the following steps:  Update environment template and deploy new version so resources will be auto-registered and metadata collected Validate that environment resources and metadata are associated with the AppRegistry application  Step-by-step guide Here are the steps you need to follow to &amp;ldquo;Create Proton environment template for AppRegistry application&amp;rdquo;.
 AWS Service Catalog AppRegistry allows you to create a repository of your applications and associated resources.</description>
    </item>
    
    <item>
      <title>Monolith Application</title>
      <link>/scenario1/monolith_application.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/scenario1/monolith_application.html</guid>
      <description>What are we going to do? In this section we will provision the monolith web architecture consisting of AWS Application Load Balancer and two EC2 instances Webserver and Appserver running containers for frontend, application, Redis cache and MySQL database.
Step-by-step guide  Start by logging into your Cloud9 workstation. Clone the repository and open the folder.  cd ~/environment git clone https://github.com/aws-samples/moving-up-stack-workshop cd moving-up-stack-workshop Set your default variables
export AWS_DEFAULT_REGION=$(curl -s 169.</description>
    </item>
    
    <item>
      <title>Auto-register resources with AppRegistry</title>
      <link>/scenario3/10_map_svc_resources_with_appregistry.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/scenario3/10_map_svc_resources_with_appregistry.html</guid>
      <description>What are we going to do? We are going to perform the following steps:  Update service templates and updated the service instances using the new service template version Associate Proton service instances resources with AppRegistry application and further enrich the application metadata Validate Proton service instances and metadata is associated with the AppRegistryApplication  Step-by-step guide Here are the steps you need to follow to update AWS Proton templates and associate resources, and it‚Äôs metadata with AppRegistry application.</description>
    </item>
    
    <item>
      <title>Create Proton Environment</title>
      <link>/scenario2/10_create_environment.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/scenario2/10_create_environment.html</guid>
      <description>What are we going to do? In this section we will provision the environment for our microservices. This environment will include a VPC with public and private subnets, an ECS Cluster, and the shared Application Load Balancer.
Step by step guide With the registered and published environment template, you can now create a Proton environment from the template.
Open the Proton Console. Click on Create environment
Choose the Fargate Public and Private VPC template we created in the previous step and then click Configure.</description>
    </item>
    
    <item>
      <title>Modernize the monolith</title>
      <link>/scenario1/modernize_the_monolith.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/scenario1/modernize_the_monolith.html</guid>
      <description>What are we going to do? In this section we will break the monolithic application into microservices using combination of CloudFormation and AWS management console. The CloudFormation template will create the base infrastructure for microservices like ECS cluster, ECS task definitions, Amazon Elasticache Redis, Amazon Relational Database using MySQL, Amazon S3, and CloudFront.
We are going to perform the following steps:  Deploy CloudFormation template to create microservices infrastructure. Create Fargate Service for three microservices posts, users, threads.</description>
    </item>
    
    <item>
      <title>Connect to AWS Account</title>
      <link>/getting_started/12_connect_to_aws_account.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/getting_started/12_connect_to_aws_account.html</guid>
      <description>The following steps should be executed to apply credits if you are using your own AWS account. 1. Sign into your AWS account and click here
 üìù Note: Please ensure you enter the promotion code in the AWS account where you will run this workshop.
   Click on Redeem credit at the top right of the console.
  Enter the Promotion code issued to you by the AWS employee</description>
    </item>
    
    <item>
      <title>Reference Architecture</title>
      <link>/getting_started/13_reference_architecture.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/getting_started/13_reference_architecture.html</guid>
      <description>Reference Architecture Current Planned </description>
    </item>
    
    <item>
      <title>Create Proton Service</title>
      <link>/scenario2/15_create_service.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/scenario2/15_create_service.html</guid>
      <description>What are we going to do? In this section we will provision our microservices using Proton. This will mimic the developer self service experience of being able to deploy microservices.
Step by step guide With the registered and published service template and deployed environment, you can now create a Proton service and deploy it into your Proton environment. Open the Proton Console. Click on Create service
Choose the Fargate Public LoadBalanced Service with Redis and MySQL template we created in the previous section and then click Configure.</description>
    </item>
    
    <item>
      <title>Query AppRegistry application metadata</title>
      <link>/scenario3/15_query_appregistry_application_metadata.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/scenario3/15_query_appregistry_application_metadata.html</guid>
      <description>What are we going to do? We are going to perform the following steps:  Query AppRegistryApplication metadata to find information cross all resources belonging to an AppRegistry application   Open the AppRegistry console and click at the EcsApp application to see more details. Observe that at this point there are a total of four resources and also four attribute groups associated with this application.
Because all the resources and metadata are linked to the application, you can query AppRegistry to find information cross resources belonging to the application.</description>
    </item>
    
    <item>
      <title>Create a Workspace</title>
      <link>/getting_started/20_create_a_workspace.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/getting_started/20_create_a_workspace.html</guid>
      <description>A list of supported browsers for AWS Cloud9 is found here.
 Ad blockers, javascript disablers, and tracking blockers should be disabled for the cloud9 domain, or connecting to the workspace might be impacted. Cloud9 requires third-party-cookies. You can whitelist the specific domains.
 Launch Cloud9 in the region selected previously Navigate to the Cloud9 console.
 Select Create environment Name it MovingUpTheStackWorkshop, click Next step. Since we only need to access our Cloud9 environment via web browser, please select the Create a new no-ingress EC2 instance for environment (access via Systems Manager) under the Environment Type.</description>
    </item>
    
    <item>
      <title>Configure your Workspace</title>
      <link>/getting_started/25_configure_workspace.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/getting_started/25_configure_workspace.html</guid>
      <description>Follow this deep link to create an IAM role with Administrator access.
  Confirm that AWS service and EC2 are selected, then click Next: Permissions to view permissions.
  Confirm that AdministratorAccess is checked, then click Next: Tags to assign tags.
  Take the defaults, and click Next: Review to review.
  Enter movingupworkshop-admin for the Name, and click Create role.
  Click the grey circle button (in top right corner) and select Manage EC2 Instance.</description>
    </item>
    
  </channel>
</rss>
